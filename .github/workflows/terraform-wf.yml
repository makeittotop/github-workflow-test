name: Terraform WF

on:
  push:
  pull_request:
    types:
      - "closed"
      - "assigned"
      - "opened"
      - "reopened"
  schedule:
    - cron: "0/5 * * * *"
  repository_dispatch:
    types: [build]
env:
  SECRET_KEY: FOOBAR

jobs:
  terraform-wf:
    needs:
      - create_commit
    runs-on: ubuntu-18.04
    steps:
      - name:
        run: |2
          echo "SECRET_KEY: ${SECRET_KEY}"
      - name: payload data
        run:  echo ${{ github.event.client_payload.env }}
      - name: print env. vars
        run: env
      - name: AWS_ACCESS_KEY_ID
        run: |2
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          echo $AWS_ACCESS_KEY_ID
      - name: download terraform
        run: |2
          curl -o terraform.zip https://releases.hashicorp.com/terraform/0.15.0/terraform_0.15.0_linux_amd64.zip
          unzip terraform.zip
          chmod +x terraform
          sudo mv  terraform /usr/local/bin/
          rm terraform.zip
          terraform version
      - name: CWD
        run: |2
          pwd
          ls -ltha $PWD
      - name: checkout repo.
        uses: actions/checkout@v2
      - name: CWD
        run: |2
          pwd
          ls -ltha $PWD
      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/}
      - name: run terraform init and validate
        run: |2
          terraform init
          terraform validate
  create_commit:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
    - name: Create issue using REST API
      run: |
        curl --request POST \
        --url https://api.github.com/repos/${{ github.repository }}/issues \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'content-type: application/json' \
        --data '{
          "title": "Automated issue for commit: ${{ github.event.commits[0].message }}",
          "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
          }' \
        --fail
  one:
    runs-on: ubuntu-latest
    steps:
      - name: Set selected color
        run: echo '::set-output name=FOOBAR::green'
        id: random-color-generator
      - name: Get color
        run: echo "The selected color is ${{ steps.random-color-generator.outputs.FOOBAR }}"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"
  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    needs:
      - one
    container:
      image: makeittotop/terraform_opa:latest
    steps:
    - uses: actions/checkout@v2
    - name: terrafrom version
      run: terraform version
    - name: opa version
      run: opa version
    - name: terrafrom fmt
      run: terraform fmt -check
    - name: terrafrom init
      run: terraform init
    - name: terraform validate
      run: terraform validate
    - name: terrafrom plan
      run: terraform plan
